diff --git a/waspc/data/Generator/templates/server/src/auth/providers/config/google.ts b/waspc/data/Generator/templates/server/src/auth/providers/config/google.ts
index caf38a87..8973e63c 100644
--- a/waspc/data/Generator/templates/server/src/auth/providers/config/google.ts
+++ b/waspc/data/Generator/templates/server/src/auth/providers/config/google.ts
@@ -44,6 +44,8 @@ const _waspConfig: ProviderConfig = {
         async function getGoogleProfile(accessToken: string): Promise<{
             providerProfile: unknown;
             providerUserId: string;
+            accessToken: string;
+            refreshToken: string;
         }> {
             const response = await fetch(
                 "https://openidconnect.googleapis.com/v1/userinfo",
@@ -61,7 +63,7 @@ const _waspConfig: ProviderConfig = {
                 throw new Error("Invalid profile");
             }
 
-            return { providerProfile, providerUserId: providerProfile.sub };
+            return { providerProfile, providerUserId: providerProfile.sub, accessToken, refreshToken };
         }
 
         return createOAuthProviderRouter({
@@ -70,8 +72,8 @@ const _waspConfig: ProviderConfig = {
             userSignupFields: _waspUserSignupFields,
             getAuthorizationUrl: ({ state, codeVerifier }) => google.createAuthorizationURL(state, codeVerifier, config),
             getProviderInfo: async ({ code, codeVerifier }) => {
-                const { accessToken } = await google.validateAuthorizationCode(code, codeVerifier);
-                return getGoogleProfile(accessToken);
+                const { accessToken, refreshToken } = await google.validateAuthorizationCode(code, codeVerifier);
+                return getGoogleProfile(accessToken, refreshToken);
             },
         });
     },
diff --git a/waspc/data/Generator/templates/server/src/auth/providers/oauth/handler.ts b/waspc/data/Generator/templates/server/src/auth/providers/oauth/handler.ts
index 9fdc36c3..f8dff180 100644
--- a/waspc/data/Generator/templates/server/src/auth/providers/oauth/handler.ts
+++ b/waspc/data/Generator/templates/server/src/auth/providers/oauth/handler.ts
@@ -70,6 +70,7 @@ function createOAuthLoginHandler<ST extends StateType>(
   return handleRejection(async (_req, res) => {
     const oAuthState = generateAndStoreOAuthState(stateTypes, provider, res);
     const url = await getAuthorizationUrl(oAuthState);
+    url.searchParams.set("access_type", "offline");
     return redirect(res, url.toString());
   })
 }
@@ -81,6 +82,8 @@ function createOAuthCallbackHandler<ST extends StateType>(
   getProviderInfo: (oAuthState: ReturnType<typeof validateAndGetOAuthState<ST>>) => Promise<{
     providerUserId: string,
     providerProfile: unknown,
+    accessToken: string,
+    refreshToken: string,
   }>,
 ) {
   return handleRejection(async (req, res) => {
@@ -93,6 +96,8 @@ function createOAuthCallbackHandler<ST extends StateType>(
             providerProfile,
             providerUserId,
             userSignupFields,
+            accessToken,
+            referhToken,
         );
         // Redirect to the client with the one time code
         return redirect(res, redirectUri.toString());
diff --git a/waspc/data/Generator/templates/server/src/auth/providers/oauth/user.ts b/waspc/data/Generator/templates/server/src/auth/providers/oauth/user.ts
index d9c1d92a..88da959c 100644
--- a/waspc/data/Generator/templates/server/src/auth/providers/oauth/user.ts
+++ b/waspc/data/Generator/templates/server/src/auth/providers/oauth/user.ts
@@ -18,10 +18,12 @@ export async function finishOAuthFlowAndGetRedirectUri(
   providerProfile: unknown,
   providerUserId: string,
   userSignupFields: UserSignupFields | undefined,
+  accessToken: string,
+  refreshToken: string,
 ): Promise<URL> {
   const providerId = createProviderId(provider.id, providerUserId);
 
-  const authId = await getAuthIdFromProviderDetails(providerId, providerProfile, userSignupFields);
+  const authId = await getAuthIdFromProviderDetails(providerId, providerProfile, userSignupFields, accessToken, refreshToken);
 
   const oneTimeCode = await tokenStore.createToken(authId);
 
@@ -48,6 +50,8 @@ async function getAuthIdFromProviderDetails(
   providerId: ProviderId,
   providerProfile: any,
   userSignupFields: UserSignupFields | undefined,
+  accessToken: string,
+  refreshToken: string,
 ): Promise<{= authEntityUpper =}['id']> {
   const existingAuthIdentity = await prisma.{= authIdentityEntityLower =}.findUnique({
     where: {
@@ -71,7 +75,10 @@ async function getAuthIdFromProviderDetails(
     );
 
     // For now, we don't have any extra data for the oauth providers, so we just pass an empty object.
-    const providerData = await sanitizeAndSerializeProviderData({})
+    const providerData = await sanitizeAndSerializeProviderData({
+      accessToken,
+      refreshToken,
+    })
   
     const user = await createUser(
       providerId,
